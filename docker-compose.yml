version: '3.8'

services:
  minio:
    container_name: minio
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_USE_SSL: "${MINIO_USE_SSL}"
    volumes:
      - minio-storage:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend  # Используем общую сеть
  
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wishlist_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d wishlist_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - backend  # Подключаем к общей сети
  
  server:
    container_name: server
    restart: unless-stopped
    environment:
      JWT_SECRET: "${JWT_SECRET}"
      PROD_URL: "${PROD_URL}"
      BOT_TOKEN: "${BOT_TOKEN}"
    build:
      context: .
    ports:
      - "8080:8080"
    networks:
      - backend  # Подключаем к общей сети
  
  frontend:
    container_name: frontend
    build:
      context: ../wish-list-2-front/ # Укажите правильный путь
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=https://api.get-my-wishlist.ru
    networks:
      - backend
    restart: unless-stopped
    ports:
      - "3000:3000"
  
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Добавляем специальный хост
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/nginx/certs
    networks:
      - backend
      

networks:
  backend:
    driver: bridge

volumes:
  minio-storage:
  pgdata:
    driver: local